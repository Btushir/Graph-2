"""
TC:
"""
class Solution:
    def dfs(self, graph, colors, i, cl):
        # BC
        # if the node is already colourd do not call DFS
        if colors[i] != -1:
            return

            # logic
        colors[i] = cl
        # print(colors)
        # check what all nodes ith node is connected to
        for j in range(len(graph)):
            if graph[i][j] == 1:
                # if jth node is connected to ith node then he color would be same for both
                # they both belong the same connected component
                self.dfs(graph, colors, j, cl)

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:

        # color each node, nodes belogning to the same group have same color
        # adj matrix is given to travserse it, imagine individual nodes are present
        # on the columns and while traversing the nodes via cols find what all nodes
        # are connected to the using rows.
        n = len(graph)
        # index is the node and value at index is the color
        each_node_colors = [-1 for _ in range(n)]
        cl = 0
        # call DFS
        # dfs on each node
        for i in range(n):                                      # O(V+E) // O(n^2)
            if each_node_colors[i] == -1:
                self.dfs(graph, each_node_colors, i, cl)
                cl += 1
        print(each_node_colors)

        # find number of nodes in each group
        # number of groups is equal to the unique number of colrs
        # idx is colr and value is number of nodes
        num_groups = [0 for _ in range(cl)]                         # O(n)
        for c in each_node_colors:
            num_groups[c] += 1

        # find the number of infected nodes in each group or what is the
        # color of node
        infected_each_grup = [0 for _ in range(cl)]                     # <<<<< O(n)
        for node in initial:
            # find the group to which infected node belongs to
            gr = each_node_colors[node]
            infected_each_grup[gr] += 1

        # calcuate answer
        ans = float("inf")
        for node in initial:
            # find to which group/colr infected node belongs
            gr = each_node_colors[node]
            # find how many infected nodes are there
            if infected_each_grup[gr] == 1:
                if ans == float("inf"):
                    ans = node
                    # compare how many nodes can be saved
                # each_node_colors[node]: colr of node
                # num_groups[each_node_colors[node]: number of nodes in that group that can be saved
                elif num_groups[each_node_colors[node]] > num_groups[each_node_colors[ans]]:
                    ans = node
                    # if saving equal number
                elif num_groups[each_node_colors[node]] == num_groups[each_node_colors[ans]]:
                    ans = min(ans, node)

        if ans == float("inf"):
            for node in initial:
                ans = min(ans, node)

        return ans




